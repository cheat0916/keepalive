name: Keepalive

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  keepalive:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache fail counts
        id: cache-fail
        uses: actions/cache@v3
        with:
          path: fail_counts.txt
          key: fail-counts-${{ runner.os }}-v1

      - name: Run Keepalive script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -e

          URLS=(
            "https://nezha-cheat0916.koyeb.app/"
          )

          MAX_RETRY=2
          FAIL_FILE="fail_counts.txt"
          LAST_REPORT_FILE=".last_daily_report"
          DAYS_KEEP=7
          PARALLEL=5  # 并行数量

          [ -f "$FAIL_FILE" ] || > "$FAIL_FILE"
          [ -f "$LAST_REPORT_FILE" ] || > "$LAST_REPORT_FILE"

          NOW=$(date +%s)
          TODAY=$(date '+%Y-%m-%d')

          declare -A FAIL_COUNTS
          while IFS=" " read -r url count timestamp; do
            timestamp=${timestamp:-$NOW}
            DIFF=$(( (NOW - timestamp) / 86400 ))
            [ $DIFF -le $DAYS_KEEP ] && FAIL_COUNTS["$url"]=$count
          done < "$FAIL_FILE"

          IS_DAILY_REPORT=false
          HOUR_BEIJING=$(( $(date -u +%H) + 8 ))  # UTC -> 北京时间
          [ $HOUR_BEIJING -ge 9 ] && [ $HOUR_BEIJING -le 11 ] && LAST_SENT=$(cat "$LAST_REPORT_FILE" 2>/dev/null || echo "") && [ "$LAST_SENT" != "$TODAY" ] && IS_DAILY_REPORT=true && echo "$TODAY" > "$LAST_REPORT_FILE"

          REPORT="📋 *每日健康简报*\n时间: $(date '+%Y-%m-%d %H:%M:%S')\n\n"

          check_url() {
            local url="$1"
            local status
            local retry=0
            status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            while [ "$status" != "200" ] && [ $retry -lt $MAX_RETRY ]; do
              sleep 5
              status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              ((retry++))
            done

            if [ "$status" != "200" ]; then
              FAIL_COUNTS["$url"]=$(( ${FAIL_COUNTS["$url"]:-0} + 1 ))
              echo "❌ $url failed (${FAIL_COUNTS["$url"]} times in a row)"
              [ "${FAIL_COUNTS["$url"]}" -ge 3 ] && [ "$IS_DAILY_REPORT" = false ] && curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d chat_id="${TELEGRAM_CHAT_ID}" -d text="⚠️ 保活失败（连续 ${FAIL_COUNTS["$url"]} 次）\nURL: $url\n状态码: $status\n时间: $(date '+%Y-%m-%d %H:%M:%S')" -d parse_mode="Markdown"
              REPORT+="❌ $url  (状态码: $status, 连续失败 ${FAIL_COUNTS["$url"]} 次)\n"
            else
              FAIL_COUNTS["$url"]=0
              echo "✅ $url is UP"
              REPORT+="✅ $url  (状态码: $status)\n"
            fi
          }

          printf "%s\n" "${URLS[@]}" | xargs -n1 -P $PARALLEL -I {} bash -c 'check_url "$@"' _ {}

          > "$FAIL_FILE"
          for url in "${!FAIL_COUNTS[@]}"; do
            printf "%s %d %d\n" "$url" "${FAIL_COUNTS[$url]}" "$NOW" >> "$FAIL_FILE"
          done

          [ "$IS_DAILY_REPORT" = true ] && curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d chat_id="${TELEGRAM_CHAT_ID}" -d text="$REPORT" -d parse_mode="Markdown"
